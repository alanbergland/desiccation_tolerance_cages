#!/usr/bin/env Rscript

library(data.table)
library(foreach)
library(ggplot2)
library(doMC)
registerDoMC(cores=5)
library(cowplot)


get_het_sites <- function(sampleID) {
  het_fn <- paste("/scratch/caw5cv/desiccation_tolerance_cages/01_reconstructions/filtered_estimates/", sampleID, ".het", sep="")
  hetSites <- fread(het_fn, header=F, col.names=c("CHR","POS","GT"))
  hetSites <- hetSites[GT %in% c("0/1","1/0")]
  hetSites[, CHR := paste("chr", CHR, sep="")]

  return(hetSites)
}

importReadCounts <- function(filename) {
  rc <- fread(cmd=paste('zcat ', filename, sep=""), header=T, select=c(1,2,6,7))
  setnames(rc, "contig", "CHR")
  setnames(rc, "position", "POS")
}

get_het_ReadCounts <- function(iMapSplice_files) {
  if(! file.exists('./ASE/hetReadCounts.dat.gz')) {
      o <- foreach(i=iMapSplice_files, .combine="rbind", .errorhandling="remove") %dopar% {
        filename <- basename(i)
        sampleID <- unlist(strsplit(filename, split="[.]"))[1]
        imap_rc <- importReadCounts(paste("./ASE/iMapSplice/", filename, sep=""))
        rsubread_rc <- importReadCounts(paste("./ASE/RSubRead/", filename, sep=""))
        if(! file.exists(paste("/scratch/caw5cv/desiccation_tolerance_cages/01_reconstructions/filtered_estimates/", sampleID, ".het", sep=""))) {
          return(NULL)
        }
        hetSites <- get_het_sites(sampleID)
        imap_rc <- merge(imap_rc, hetSites, by.x=c("CHR","POS"), by.y=c("CHR","POS"))
        imap_rc[, total := refCount + altCount]
        imap_rc <- imap_rc[refCount>1 & altCount>1 & total > 5]
        imap_rc[, mapper := "iMapSplice"]

        rsubread_rc <- merge(rsubread_rc, hetSites, by.x=c("CHR","POS"), by.y=c("CHR","POS"))
        rsubread_rc[, total := refCount + altCount]
        rsubread_rc <- rsubread_rc[refCount>1 & altCount>1 & total > 5]
        rsubread_rc[, mapper := "RSubRead"]

        out <- rbindlist(list(imap_rc, rsubread_rc))
        out[, "sample" := sampleID]
        return(out)
      }

    o[, CHR := tstrsplit(CHR, "chr")[2]]
    o[, GT := NULL]

    gz <- gzfile("./ASE/hetReadCounts.dat.gz", "w")
    write.table(o, gz, row.names=F, col.names=T, sep="\t", quote=F)
    close(gz)
    return(o)
  } else {
    o <- fread('zcat ./ASE/hetReadCounts.dat.gz')
    return(o)
  }
}


get_mapping_stats <- function(mapped_read_bam_files) {

  o <- foreach(file=mapped_read_bam_files, .combine="rbind", .errorhandling="remove") %dopar% {
    mapper <- unlist(strsplit(file, split="/"))[4]
    filename <- basename(file)
    sampleID <- unlist(strsplit(filename, split="[.]"))[1]
    dat <- fread(cmd=paste("samtools idxstats ", file, sep=""), header=F, col.names=c("CHR","Length","Mapped", "Unmapped"))
    dat[, sample := sampleID]
    dat[, mapper := mapper]
  }

  o[CHR == "*", CHR := "Other"]
  o[, totalReads := Mapped + Unmapped]

  # Exclude those with fewer than 100k reads
  goodSamples <- o[sample %in% o[, sum(Mapped + Unmapped), by=sample][V1 > 1e5]$sample]

  #% mapped, # mapped per chrom
  percentMapped <- goodSamples[, list(percent_mapped = sum(Mapped) / (sum(Mapped) + sum(Unmapped))), by=list(sample, mapper)]

  percentMapped[, mapper := factor(mapper, levels=c("RSubRead","iMapSplice"))]

  return(percentMapped)
}


# Import raw readcounts at heterozygous sites
iMapSplice_files <- list.files(path="./ASE/iMapSplice/", pattern="*.readcounts.gz", full.names=T)
het_readcounts <- get_het_ReadCounts(iMapSplice_files)
het_readcounts <- het_readcounts

# Import exonic ranges from GTF file
exons <- fread('dm3.gtf', select=c(1,3,4,5,9), header=F, col.names=c("chr","type","cdsStart","cdsStop","feature"))
exons <- exons[type=="exon"]
exons <- exons[chr %in% c("chr2L","chr2R","chr3L","chr3R","chrX")]
exons[, chr := tstrsplit(chr, "chr")[2]]
exons[, AnnotationID := tstrsplit(feature, split='["]')[2]]
setnames(exons, "chr", "CHR")
setkey(exons, CHR, cdsStart, cdsStop)
exons[, feature := NULL]
exons <- exons[!duplicated(exons)]

# Prepare read counts table for merging
het_readcounts[, cdsStop :=  POS]
het_readcounts[, cdsStart := POS]
het_readcounts[, id := 1:.N]

# Select read count loci that are exonic
exonic_ids <- unique(foverlaps(het_readcounts, exons, type="within")[!is.na(cdsStart), id])
exonic_bias_readcounts <- het_readcounts[id %in% exonic_ids]
exonic_bias_readcounts[, mapper := factor(mapper, levels=c("RSubRead","iMapSplice"))]

gA <- ggplot(exonic_bias_readcounts[refCount > 2 & altCount > 2 & total >= 15], aes(x=(refCount/total), color=CHR)) +
geom_density() + facet_grid(.~mapper) +
geom_vline(xintercept=0.5, linetype="dashed", alpha=0.5) +
labs(x="Reference Allele Mapping Bias", y="Density") +
scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), labels=c("0", "0.25", "0.5", "0.75", "1"))

# Build proportion of mapped reads figure
mapped_read_bam_files <- list.files("../03_map_rna/mapped_reads", recursive=T, pattern="*.bam$", full.names=T)
mapping_stats <- get_mapping_stats(mapped_read_bam_files)
gB <- ggplot(mapping_stats, mapping=aes(x=mapper, y=percent_mapped, group=sample)) + geom_line(alpha=0.3) + labs(x="RNA Read Mapper", y="Percent Reads Mapped")

g.all.bias <- plot_grid(gA, gB, labels = c("A", "B"), align = "h", rel_widths=c(2,1))

ggsave(g.all.bias, file="mapperDifferences.svg", width=27, height=8, units="cm")

# Continue with ASE analysis

readcounts_by_feature <- foverlaps(het_readcounts[mapper=="iMapSplice"], exons, type="within")[!is.na(cdsStart)]
readcounts_by_feature[, id := 1:.N]
setkey(readcounts_by_feature, AnnotationID)

FBids <- fread('dm3.GC_to_FB.txt', select=c(1,2,4), col.names=c("AnnotationID","FlyBaseID","symbol"))
setkey(FBids, AnnotationID)

readcounts.merged <- merge(readcounts_by_feature, FBids, allow.cartesian=T)

# select FBid with greatest total read counts

setkey(readcounts.merged, sample, FlyBaseID, CHR, POS)

readcounts.merged[, id := rleid(sample,FlyBaseID, CHR, POS)]

readcounts.merged.unique <- readcounts.merged[!duplicated(id)]
readcounts.merged.unique[, c("type","cdsStart","cdsStop","i.cdsStop","i.cdsStart","id") := NULL]

# only include genes with at least 25 individuals with observations at any SNP within the gene
overlaps.highcount <- readcounts.merged.unique[FlyBaseID %in% readcounts.merged.unique[, .N, by=FlyBaseID][N>=25][,FlyBaseID]]
overlaps.highcount[, bias := refCount / total]


overlaps.highcount[, TREATMENT := tstrsplit(sample, split="[-]")[1]]
overlaps.highcount[, CAGE := tstrsplit(sample, split="[-]")[2]]

# ggplot(overlaps.highcount[FlyBaseID=="FBgn0263395"], aes(x=TREATMENT, y=bias, color=TREATMENT)) + geom_jitter() + facet_grid(.~POS)

# take gene with max summed read depth

singleSNP <- overlaps.highcount[, list("sumRD"=sum(total)), by=list(FlyBaseID,POS)][, list("POS"=POS[which.max(sumRD)]), by=FlyBaseID]
setkey(singleSNP, FlyBaseID, POS)
setkey(overlaps.highcount, FlyBaseID, POS)

overlaps.singleSNP <- merge(overlaps.highcount, singleSNP)


tmp <- overlaps.singleSNP[, .N, by=list(FlyBaseID, POS,TREATMENT)][N>=5][,.N, by=list(FlyBaseID,POS)][N==2]

setkey(tmp, FlyBaseID, POS)

overlaps.final <- merge(overlaps.singleSNP, tmp)


reg <- overlaps.final[, list(
    "beta.estimate" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[2,1],
    "beta.SE" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[2,2],
    "beta.p" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[2,4],
    "intercept.estimate" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[1,1],
    "intercept.SE" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[1,2],
    "intercept.p" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[1,4],
    "fit.se" = predict.glm(glm(formula=cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial), se.fit=TRUE)$se.fit,
    "n_pre" = sum(TREATMENT=="4CB"),
    "n_post" = sum(TREATMENT=="23HR")
), by=list(FlyBaseID,CHR,POS)]

reg <- reg[fit.se != intercept.SE][!duplicated(FlyBaseID)]
reg[, fit.estimate := intercept.estimate + beta.estimate]
reg[, fit.lower := fit.estimate - 1.96*fit.se]
reg[, fit.upper := fit.estimate + 1.96*fit.se]
reg[fit.lower <= 0 & fit.upper >= 0, post.ASE := FALSE]
reg[fit.lower > 0 | fit.upper < 0, post.ASE := TRUE]
reg[, intercept.upper := intercept.estimate + 1.96*intercept.SE]
reg[, intercept.lower := intercept.estimate - 1.96*intercept.SE]
reg[intercept.upper < 0 | intercept.lower > 0, pre.ASE := TRUE]
reg[is.na(pre.ASE), pre.ASE := FALSE]



seasonal <- fread('seasonal_clinal_snps/mel_all_paired20_2sample_4switch_noPA_caF_popyear.f_s.glm')
clinal <- fread('seasonal_clinal_snps/mel_clinal_uniquepops.glm')
seasonal_clinal <- merge(seasonal, clinal, by.x=c("chrom","pos"), by.y=c("chrom","pos"))
remove(seasonal)
remove(clinal)
gc()

reg.merged <- merge(reg, seasonal_clinal, by.x=c("CHR","POS"), by.y=c("chrom","pos"))
reg.merged[, clinal := ifelse(clinal.p < 0.05, TRUE, FALSE)]
reg.merged[, seasonal := ifelse(seas.p < 0.05, TRUE, FALSE)]


# Pre ASE SNPs
obs_preASE <- nrow(reg.merged[pre.ASE==T])

# 20 / 271 observed seasonal
obs_preASE_seasonal <- nrow(reg.merged[pre.ASE==T & seasonal==TRUE])
seasonal_preASE_permutations <- foreach(i=1:10000, .combine="rbind") %dopar% {
  data.table(reg.merged[sample(.N, size=obs_preASE)][seasonal==TRUE][, .N])
}
# 79 / 271 observed clinal
obs_preASE_clinal <- nrow(reg.merged[pre.ASE==T & clinal==TRUE])
clinal_preASE_permutations <- foreach(i=1:10000, .combine="rbind") %dopar% {
  data.table(reg.merged[sample(.N, size=obs_preASE)][clinal==TRUE][, .N])
}


# Post ASE SNPs
obs_postASE <- nrow(reg.merged[post.ASE==T])

obs_postASE_seasonal <- nrow(reg.merged[post.ASE==T & seasonal==TRUE])
seasonal_postASE_permutations <- foreach(i=1:10000, .combine="rbind") %dopar% {
  data.table(reg.merged[sample(.N, size=obs_postASE)][seasonal==TRUE][, .N])
}

obs_postASE_clinal <- nrow(reg.merged[post.ASE==T & clinal==TRUE])
clinal_postASE_permutations <- foreach(i=1:10000, .combine="rbind") %dopar% {
  data.table(reg.merged[sample(.N, size=obs_postASE)][clinal==TRUE][, .N])
}



# Reversed ASE SNPs
obs_reversal <- nrow(reg.merged[(intercept.upper < 0 & fit.lower > 0) | (fit.upper < 0 & intercept.lower > 0) ])

obs_reversal_seasonal <- nrow(reg.merged[((intercept.upper < 0 & fit.lower > 0) | (fit.upper < 0 & intercept.lower > 0)) & seasonal==T])
seasonal_reversal_permutations <- foreach(i=1:10000, .combine="rbind") %dopar% {
  data.table(reg.merged[sample(.N, size=obs_reversal)][seasonal==TRUE][, .N])
}


obs_reversal_clinal <- nrow(reg.merged[((intercept.upper < 0 & fit.lower > 0) | (fit.upper < 0 & intercept.lower > 0)) & clinal==T])
clinal_reversal_permutations <- foreach(i=1:10000, .combine="rbind") %dopar% {
  data.table(reg.merged[sample(.N, size=obs_reversal)][clinal==TRUE][, .N])
}

#10,000 same-sized draws
clinal_reversal_permutations[, ASEtype := "Reversal of ASE"]
seasonal_reversal_permutations[, ASEtype := "Reversal of ASE"]
clinal_postASE_permutations[, ASEtype := "Post-starvation ASE"]
seasonal_postASE_permutations[, ASEtype := "Post-starvation ASE"]
clinal_preASE_permutations[, ASEtype := "Pre-starvation ASE"]
seasonal_preASE_permutations[, ASEtype := "Pre-starvation ASE"]

clinal_reversal_permutations[,   SNPtype := "Clinal"]
seasonal_reversal_permutations[, SNPtype := "seasonal"]
clinal_postASE_permutations[,    SNPtype := "Clinal"]
seasonal_postASE_permutations[,  SNPtype := "seasonal"]
clinal_preASE_permutations[,     SNPtype := "Clinal"]
seasonal_preASE_permutations[,   SNPtype := "seasonal"]

g1 <- ggplot(seasonal_preASE_permutations, aes(x=V1)) + geom_histogram(binwidth=1) + geom_vline(xintercept=obs_preASE_seasonal, linetype="dashed", color="black") + labs(x="", y="Frequency")
g2 <- ggplot(seasonal_postASE_permutations, aes(x=V1)) + geom_histogram(binwidth=1) + geom_vline(xintercept=obs_postASE_seasonal, linetype="dashed", color="black") + labs(x="", y="")
g3 <- ggplot(seasonal_reversal_permutations, aes(x=V1)) + geom_histogram(binwidth=1) + geom_vline(xintercept=obs_reversal_seasonal, linetype="dashed", color="black") + labs(x="", y="")
g4 <- ggplot(clinal_preASE_permutations, aes(x=V1)) + geom_histogram(binwidth=1) + geom_vline(xintercept=obs_preASE_clinal, linetype="dashed", color="black") + labs(x="Intersecting SNPs", y="Frequency")
g5 <- ggplot(clinal_postASE_permutations, aes(x=V1)) + geom_histogram(binwidth=1) + geom_vline(xintercept=obs_postASE_clinal, linetype="dashed", color="black") + labs(x="Intersecting SNPs", y="")
g6 <- ggplot(clinal_reversal_permutations, aes(x=V1)) + geom_histogram(binwidth=1) + geom_vline(xintercept=obs_reversal_clinal, linetype="dashed", color="black") + labs(x="Intersecting SNPs", y="")

g.all.enrichment <- plot_grid(g1, g2, g3, g4, g5, g6, labels = c("A", "B","C","D","E","F","G"), align = "h", nrow=2)

ggsave(g.all.enrichment, file="enrichment.svg", width=20, height=15, units="cm")
