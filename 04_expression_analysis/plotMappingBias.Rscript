#!/usr/bin/env Rscript

library(data.table)
library(foreach)
library(ggplot2)
library(doMC)
registerDoMC(cores=5)
library(cowplot)



get_het_sites <- function(sampleID) {
  het_fn <- paste("/scratch/caw5cv/desiccation_tolerance_cages/01_reconstructions/filtered_estimates/", sampleID, ".het", sep="")
  hetSites <- fread(het_fn, header=F, col.names=c("CHR","POS","GT"))
  hetSites <- hetSites[GT %in% c("0/1","1/0")]
  hetSites[, CHR := paste("chr", CHR, sep="")]

  return(hetSites)
}

iMapSplice_files <- list.files(path="./ASE/iMapSplice/", pattern="*.readcounts.gz", full.names=T)

RSubRead_files <- list.files(path="./ASE/RSubRead/", pattern="*.readcounts.gz", full.names=T)


importReadCounts <- function(filename) {
  rc <- fread(cmd=paste('zcat ', filename, sep=""), header=T, select=c(1,2,6,7))
  setnames(rc, "contig", "CHR")
  setnames(rc, "position", "POS")
}

# get ASE read counts
o <- foreach(i=iMapSplice_files, .combine="rbind", .errorhandling="remove") %dopar% {
  filename <- basename(i)
  sampleID <- unlist(strsplit(filename, split="[.]"))[1]
  imap_rc <- importReadCounts(paste("./ASE/iMapSplice/", filename, sep=""))
  rsubread_rc <- importReadCounts(paste("./ASE/RSubRead/", filename, sep=""))
  if(! file.exists(paste("/scratch/caw5cv/desiccation_tolerance_cages/01_reconstructions/filtered_estimates/", sampleID, ".het", sep=""))) {
    return(NULL)
  }
  hetSites <- get_het_sites(sampleID)
  imap_rc <- merge(imap_rc, hetSites, by.x=c("CHR","POS"), by.y=c("CHR","POS"))
  imap_rc[, total := refCount + altCount]
  imap_rc <- imap_rc[refCount>1 & altCount>1 & total > 5]
  imap_rc[, mapper := "iMapSplice"]

  rsubread_rc <- merge(rsubread_rc, hetSites, by.x=c("CHR","POS"), by.y=c("CHR","POS"))
  rsubread_rc[, total := refCount + altCount]
  rsubread_rc <- rsubread_rc[refCount>1 & altCount>1 & total > 5]
  rsubread_rc[, mapper := "RSubRead"]

  out <- rbindlist(list(imap_rc, rsubread_rc))
  out[, "sample" := sampleID]
  return(out)
}

o[, CHR := tstrsplit(CHR, "chr")[2]]


exonic <- fread('dm3.gtf', select=c(1,3,4,5,9), header=F, col.names=c("chr","type","cdsStart","cdsStop","feature"))
exonic <- exonic[type=="exon"]
exonic <- exonic[chr %in% c("chr2L","chr2R","chr3L","chr3R","chrX")]
exonic[, chr := tstrsplit(chr, "chr")[2]]
setnames(exonic, "chr", "CHR")
setkey(exonic, CHR, cdsStart, cdsStop)

o[, cdsStop :=  POS]
o[, cdsStart := POS]
o[, id := 1:.N]

ids_within_ranges <- unique(foverlaps(o, exonic, type="within")[!is.na(cdsStart), id])
hetSites <- o[id %in% ids_within_ranges]

# write output
write.table(hetSites[, ! c("GT","total","propRef","id","cdsStop","cdsStart")], file="./ASE/hetReadCounts.dat", quote=F, row.names=F, col.names=T, sep="\t")
system('gzip ./ASE/hetReadCounts.dat')

hetSites <- fread('zcat ./ASE/hetReadCounts.dat.gz')
hetSites <- hetSites[mapper=="iMapSplice"]
hetSites[, cdsStart := POS]
hetSites[, cdsStop := POS]
hetSites[, id := 1:.N]

overlaps <- foverlaps(hetSites, exonic, type="within")[!is.na(cdsStart)]
overlaps[, AnnotationID := tstrsplit(feature, split='["]')[2]]
overlaps[, total := refCount+altCount]

# add FBid

FBids <- fread('dm3.GC_to_FB.txt', col.names=c("AnnotationID","FlyBaseID","converted_id","symbol"))
setkey(FBids, AnnotationID)

overlaps <- merge(overlaps, FBids[!duplicated(AnnotationID)], by.x="AnnotationID", by.y="AnnotationID")

# only include genes with at least 25 individuals with observations at any SNP within the gene
overlaps.highcount <- overlaps[AnnotationID %in% overlaps[, .N, by=AnnotationID][N>25][,AnnotationID]]

overlaps.highcount[, TREATMENT := tstrsplit(sample, split="[-]")[1]]

ggplot(overlaps.highcount[FlyBaseID=="FBgn0263395"], aes(x=TREATMENT, y=bias, color=TREATMENT)) + geom_jitter() + facet_grid(.~POS)

# take gene with max summed read depth

singleSNP <- overlaps.highcount[, list("sumRD"=sum(total)), by=list(AnnotationID,POS)][, list("POS"=POS[which.max(sumRD)]), by=AnnotationID]
setkey(singleSNP, AnnotationID, POS)
setkey(overlaps.highcount, AnnotationID, POS)

overlaps.singleSNP <- merge(overlaps.highcount, singleSNP)
overlaps.singleSNP[, uniqueID := rleid(AnnotationID,POS,sample)]
overlaps.singleSNP <- overlaps.singleSNP[!duplicated(uniqueID)]

overlaps.singleSNP[, comboID := rleid(AnnotationID,POS)]
overlaps.singleSNP[, TREATMENT := tstrsplit(sample, split="[-]")[1]]
overlaps.singleSNP[, CAGE := tstrsplit(sample, split="[-]")[2]]

tmp <- overlaps.singleSNP[, .N, by=list(AnnotationID, POS,TREATMENT)][N>5][,.N, by=list(AnnotationID,POS)][N==2]

setkey(tmp, AnnotationID, POS)

overlaps.final <- merge(overlaps.singleSNP, tmp)

overlaps.final[, c("type","feature","mapper","i.cdsStart","i.cdsStop","uniqueID","comboID") := NULL]
overlaps.final[, bias := refCount / total]

overlaps.final.highcount <- overlaps.final[AnnotationID %in% overlaps.final[refCount>4 & altCount>4 & total > 20][, .N, by=list(AnnotationID,TREATMENT)][N > 10][, .N, by=AnnotationID][N==2][,AnnotationID]][refCount>4 & altCount>4 & total > 20]





bias.bygroup <- overlaps.final.highcount[, list("meanBias"=mean(bias), "sdBias"=sd(bias), .N), by=list(AnnotationID, TREATMENT)]

tmp <- dcast(bias.bygroup, AnnotationID ~ TREATMENT, value.var=c("meanBias","sdBias","N"))[!is.na(meanBias_4CB) & !is.na(meanBias_23HR)]
crossZero <- tmp[(meanBias_23HR > 0.5 & meanBias_4CB < 0.5) | (meanBias_23HR < 0.5 & meanBias_4CB > 0.5)]
crossZero[, delta := abs(meanBias_4CB - meanBias_23HR)]

crossZero[order(-delta)]

ggplot(overlaps.final[AnnotationID=="CG11129"][refCount>5 & altCount > 5], aes(x=TREATMENT, y=bias))  + geom_jitter()

# ribosomal proteins?
CG8495
CG10071
CG15442
CG4863

#
 5:      CG15442     0.5862956    0.3988432   0.2945283  0.2552092     57    67


reg <- overlaps.final.highcount[, list(
    "beta.estimate" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[2,1],
    "beta.SE" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[2,2],
    "beta.p" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[2,4],
    "intercept.estimate" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[1,1],
    "intercept.SE" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[1,2],
    "intercept.p" = summary(glm(cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial))$coefficients[1,4],
    "fit.se" = predict.glm(glm(formula=cbind(refCount, altCount) ~ TREATMENT, family = quasibinomial), se.fit=TRUE)$se.fit,
    "n_pre" = sum(TREATMENT=="4CB"),
    "n_post" = sum(TREATMENT=="23HR")
), by=list(AnnotationID,POS)]


tmp <- reg[!duplicated(reg)][n_pre > 25 & n_post > 25]

# Because predict.glm returns _both_ group standard errors, filter to only include the SE
# that reflects the standard error different from the already-existing intercept estimate
reg2 <- tmp[tmp[, .I[which.max(abs(intercept.SE - fit.se))], by=AnnotationID]$V1]


reg2[, fit.estimate := intercept.estimate + beta.estimate]
reg2[, fit.lower := fit.estimate - 1.96*fit.se]
reg2[, fit.upper := fit.estimate + 1.96*fit.se]
reg2[fit.lower <= 0 & fit.upper >= 0, post.ASE := FALSE]
reg2[fit.lower > 0 | fit.upper < 0, post.ASE := TRUE]
reg2[, intercept.upper := intercept.estimate + 1.96*intercept.SE]
reg2[, intercept.lower := intercept.estimate - 1.96*intercept.SE]
reg2[intercept.upper < 0 | intercept.lower > 0, pre.ASE := TRUE]
reg2[is.na(pre.ASE), pre.ASE := FALSE]

reg2[fit.upper < intercept.lower | intercept.upper < fit.lower]

reg2[fit.upper < intercept.lower | intercept.upper < fit.lower][pre.ASE == TRUE & post.ASE == TRUE]
# yields two hits for changes in
# oderant-bindign protein
# Alcohol dehydrogenase

overlaps[ .SD[which.max(sum(total))], by=list(AnnotationID

# for a given Annotation ID, pick the position with the greatest total read counts

by=AnnotationID



hetSites <- hetSites[, ! c("GT","total","propRef","id","cdsStop","cdsStart")]
hetSites[, mapper := factor(mapper, levels=c("RSubRead", "iMapSplice"))]
setnames(hetSites, "CHR", "Chromosome")
hetSites[, total := refCount + altCount]
hetSites[, propRef := refCount / total]

gA <- ggplot(hetSites[refCount > 2 & altCount > 2 & total >= 15], aes(x=propRef, color=Chromosome)) + geom_density() + facet_grid(.~mapper) + geom_vline(xintercept=0.5, linetype="dashed", alpha=0.5) +
labs(x="Reference Allele Mapping Bias", y="Density") + scale_x_continuous(breaks=c(0, 0.25, 0.5, 0.75, 1), labels=c("0", "0.25", "0.5", "0.75", "1"))


# get mapped read counts

iMapSpliceFiles <- list.files(path="../03_map_rna/mapped_reads/iMapSplice/", pattern="*.bam$", full.names=TRUE)
RSubReadFiles <- list.files(path="../03_map_rna/mapped_reads/RSubRead/", pattern="*.bam$", full.names=TRUE)

allFiles <- c(iMapSpliceFiles, RSubReadFiles)


o <- foreach(file=allFiles, .combine="rbind", .errorhandling="remove") %dopar% {
  mapper <- unlist(strsplit(file, split="/"))[4]
  filename <- basename(file)
  sampleID <- unlist(strsplit(filename, split="[.]"))[1]
  dat <- fread(cmd=paste("samtools idxstats ", file, sep=""), header=F, col.names=c("CHR","Length","Mapped", "Unmapped"))
  dat[, sample := sampleID]
  dat[, mapper := mapper]
}

o[CHR == "*", CHR := "Other"]
o[, totalReads := Mapped + Unmapped]

# Exclude those with fewer than 100k reads
goodSamples <- o[sample %in% o[, sum(Mapped + Unmapped), by=sample][V1 > 1e5]$sample]

#% mapped, # mapped per chrom
percentMapped <- goodSamples[, list(percent_mapped = sum(Mapped) / (sum(Mapped) + sum(Unmapped))), by=list(sample, mapper)]

percentMapped[, mapper := factor(mapper, levels=c("RSubRead","iMapSplice"))]

gB <- ggplot(percentMapped, mapping=aes(x=mapper, y=percent_mapped, group=sample)) + geom_line(alpha=0.3) + labs(x="RNA Read Mapper", y="Percent Reads Mapped")


g.all <- plot_grid(gA, gB, labels = c("A", "B"), align = "h", rel_widths=c(2,1))

ggsave(g.all, file="mapperDifferences.svg", width=27, height=8, units="cm")

# need to subset exonic


vcf <- fread('../01_reconstructions/filtered_estimates/filtered.all.vcf')
sampleID <- "23HR-1-483"
command <- paste("bcftools query -s ", sampleID, " -f '%CHROM\t%POS[\t%GT]\n' ../01_reconstructions/filtered_estimates/filtered.all.vcf.gz")
bcftools query -s 23HR-1-483 -f '%CHROM\t%POS[\t%GT]\n' filtered.all.vcf.gz

o <- fread(cmd=command, header=FALSE, col.names=c("CHROM","POS","GT"))

dat <- fread(cmd="cut -f 1,2,20 filtered.all.vcf | grep -e '^#CHROM' -e '0/1' -e '1/0' ", header=F, col.names=c("CHROM","POS","GT"), skip="#CHROM")

get_heterozygous_sites <- function(ID) {


}

dat <- importReadCounts(iMapSplice_files[1])
dat[,total := refCount + altCount]

dat[, percent_ref := refCount/total]


tabix filtered.all.vcf.gz 2L > filtered.all.2L.vcf
tabix filtered.all.vcf.gz 2R > filtered.all.2R.vcf
tabix filtered.all.vcf.gz 2L > filtered.all.2L.vcf
tabix filtered.all.vcf.gz 2L > filtered.all.2L.vcf


dat[,c("V2","V587")][V587 %like% "0/1" | V587 %like% "1/0"]

bcftools query -s 23HR-1-483 filtered.all.vcf.gz
