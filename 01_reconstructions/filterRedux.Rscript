#!/usr/bin/env Rscript
library(data.table)
library(foreach)
library(ggthemes)
library(ggbeeswarm)
library(cowplot)

dat <- fread('zcat ./estimate_genomes/estimatePaths.tab.gz')
dat[, indID := tstrsplit(filestem, split="_")[1]]
dat[, filestem := NULL]

minimum_segment_length <- 1e6

clean_path <- function(path, minimum_segment_length) {
    hap1 <- path[,c("chromosome","start","stop","par1")]
    setnames(hap1, "par1", "par")

    hap2 <- path[,c("chromosome","start","stop","par2")]
    setnames(hap2, "par2", "par")

    # concatenate consecutive runs of the same haplotype
    hap1[,id := rleid(par)]
    hap2[,id := rleid(par)]

    hap1key <- hap1[,c("par","id")]
    hap1key <- hap1key[!duplicated(hap1key)]
    hap2key <- hap2[,c("par","id")]
    hap2key <- hap2key[!duplicated(hap2key)]

    hap1.merge <- merge(hap1[, list("start"=min(start), "stop"=max(stop)), by=id], hap1key, by="id")
    hap1.merge[, haplotype := 1]
    hap2.merge <- merge(hap2[, list("start"=min(start), "stop"=max(stop)), by=id], hap2key, by="id")
    hap2.merge[, haplotype := 2]
    haps <- rbindlist(list(hap1.merge, hap2.merge))
    haps[, id := NULL]

    # remove identity from chunks that are now less than 1MB in length
    haps[, length := 1 + (stop - start)]
    haps[length < minimum_segment_length, par := "unknown"][]
    return(haps[is.finite(start) & is.finite(stop)])
}

clean_path_deux <- function(path, minimum_segment_length) {
    hap1 <- path[haplotype==1]

    hap2 <- path[haplotype==2]

    # concatenate consecutive runs of the same haplotype
    hap1[,id := rleid(par)]
    hap2[,id := rleid(par)]

    hap1key <- hap1[,c("par","id")]
    hap1key <- hap1key[!duplicated(hap1key)]
    hap2key <- hap2[,c("par","id")]
    hap2key <- hap2key[!duplicated(hap2key)]

    hap1.merge <- merge(hap1[, list("start"=min(start), "stop"=max(stop)), by=id], hap1key, by="id")
    hap1.merge[, haplotype := 1]
    hap2.merge <- merge(hap2[, list("start"=min(start), "stop"=max(stop)), by=id], hap2key, by="id")
    hap2.merge[, haplotype := 2]
    haps <- rbindlist(list(hap1.merge, hap2.merge))
    haps[, id := NULL]

    # remove identity from chunks that are now less than 1MB in length
    # haps[, length := 1 + (stop - start)]
    # haps[length < minimum_segment_length, par := "unknown"][]
    # return(haps[is.finite(start) & is.finite(stop)])
}

collapseConsecutiveUnknowns <- function(path) {
    # collaps consecutive unknowns into one long unknown chunk
    path[, id := rleid(haplotype, par)]
    pathkey <- path[,c("haplotype","id","par")]
    pathkey <- pathkey[!duplicated(pathkey)]
    path.merge <- merge(path[, list("start"=min(start), "stop"=max(stop)), by=id], pathkey, by="id")
    return(path.merge[is.finite(start) & is.finite(stop)])
}

bridgeAcrossUnknown <- function(path, minimum_segment_length, id, chr) {
    # bridge across short chunks (< 1 MB) that have same parent on both ends
    path[, parLeft := shift(par, 1L, type="lag"), by=haplotype]
    path[, parRight := shift(par, 1L, type="lead"), by=haplotype]
    path[, length := 1 + (stop - start) ]
    path[, segment_class := "NA"]
    path[length >= minimum_segment_length & par != "unknown", segment_class := "original"]
    path[length >= minimum_segment_length & par == "unknown", segment_class := "multi_short_filtered"]
    path[(is.na(parLeft) | is.na(parRight)) & par == "unknown", segment_class := "end_filtered"]
    path[length < minimum_segment_length & par=="unknown" & parLeft == parRight, segment_class := "bridged"]
    path[length < minimum_segment_length & par=="unknown" & parLeft == parRight, par := parLeft]
    path[length < minimum_segment_length & par=="unknown" & parLeft != parRight, segment_class := "filtered"]
    path[, id := NULL]
    path[, "indID" := id]
    path[, "chromosome" := chr]
    return(path[, c("start","stop","haplotype", "segment_class","par","length", "indID", "chromosome")])
}

setkey(dat, indID, chromosome, start, stop)

if(! file.exists("filtered_estimates/filtered_haplotypes.tab")) {
  o <- foreach(id=unique(dat$indID), .combine="rbind", .errorhandling="remove") %do% {
    foreach(chr=c("2L","2R","3L","3R","X"), .combine="rbind", .errorhandling="remove") %do% {
      path <- dat[.(id, chr)]
      path <- clean_path(path, minimum_segment_length)
        path <- collapseConsecutiveUnknowns(path)
        path <- bridgeAcrossUnknown(path, minimum_segment_length, id, chr)
        path2 <- clean_path_deux(path)
        path2[, "indID" := id]
        path2[, "chromosome" := chr]
        #data_summary <- summarizePathData(path, filestem, chromosome)
        return(path2[])
    }
  }
  setkey(o, indID, chromosome, start, stop)
  write.table(o, file="filtered_estimates/filtered_haplotypes.tab", quote=F, row.names=F, col.names=T, sep="\t")
} else {
  print("reading pre-computed filtered haplotypes")
  o <- fread("filtered_estimates/filtered_haplotypes.tab")
}



# get recombination distribution for 1A
N_recombination <- o[, list(nUnknown=sum(par=="unknown"), Uncorrected=(.N-1)), by=list(indID, chromosome)]
N_recombination[, Corrected := (Uncorrected - nUnknown) - 1]
N_recombination.long <- melt(N_recombination, measure.vars=c("Uncorrected","Corrected"))
N_recombination.long[, nUnknown := NULL]



simHaps <- fread('zcat simulatedHaplotypes.tab.gz')
simHaps[, iter := NULL]
simHaps[, rlid := rleid(indID, lineID, haplotype)]
hapID <- simHaps[, c("rlid", "lineID", "haplotype", "chromosome", "indID")]
hapID <- hapID[!duplicated(hapID)]
simHaps.bridged <- simHaps[, list(start=min(start), stop=max(stop)), by=list(rlid)]
simHaps.merged <- merge(hapID, simHaps.bridged, by="rlid")
simHaps.long <- simHaps.merged[, .N, by=list(indID, chromosome)]
simHaps.long[, variable := "Simulated"]
simHaps.long[, value := N]
simHaps.long[, N := NULL]

dat.long <- rbindlist(list(N_recombination.long, simHaps.long))

dat.long.ag <- dat.long[, list("q025"=quantile(value, 0.025),
"q25"=quantile(value, 0.25),
"q50"=quantile(value, 0.5),
"q75"=quantile(value, 0.75),
"q975"=quantile(value, 0.975)), by=list(chromosome,variable)]

g1 <- ggplot(dat.long.ag, mapping=aes(x=factor(0), y=q50, fill=variable)) +
geom_boxplot(stat="identity", aes(middle=q50, lower=q25, ymin=q025, upper=q75, ymax=q975)) +
scale_fill_manual(values=c("white","gray80","gray40")) +
labs(x="Chromosome", y="Diploid Recombination Count", fill="Type") +
facet_grid(.~chromosome)+
   theme(axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank())

# g1 <- ggplot(dat.long, mapping=aes(x=chromosome, y=value, fill=variable)) + geom_boxplot(coef=1e10) + theme_few(12) +
# scale_fill_manual(values=c("white","gray80","gray40")) + labs(x="Chromosome", y="Diploid Recombination Count", fill="Type")

ggsave(g1, file="Figure_1A.svg", width=12, height=4, units="in")


# Get length distribution for 1B
o[,length := (stop - start) + 1]
lengths.unfiltered <- o[, c("chromosome","length")]
lengths.unfiltered[, type := "Unfiltered"]

lengths.filtered <- o[par != "unknown"][, c("chromosome","length")]
lengths.filtered[, type := "Filtered"]

simHaps.merged[, length := (stop - start) + 1]
lengths.sim <- simHaps.merged[,c("chromosome","length")]
lengths.sim[, type := "Simulated"]

lengths.merged <- rbindlist(list(lengths.unfiltered, lengths.filtered, lengths.sim))
lengths.merged[, type := factor(type, levels=c("Unfiltered", "Filtered", "Simulated"))]

lengths.merged.ag <- lengths.merged[, list("q025"=log10(quantile(length, 0.025)),
"q25"=log10(quantile(length, 0.25)),
"q50"=log10(quantile(length, 0.5)),
"q75"=log10(quantile(length, 0.75)),
"q975"=log10(quantile(length, 0.975))), by=list(chromosome,type)]

g2 <- ggplot(data=lengths.merged.ag, mapping=aes(x=factor(0),fill=type)) +
geom_boxplot(stat="identity", aes(middle=q50, lower=q25, ymin=q025, upper=q75, ymax=q975)) +
scale_fill_manual(values=c("white","gray80","gray40")) + labs(x="Chromosome", y="Recombination Block Length,\nlog10(bp)", fill="Type") +
facet_grid(.~chromosome) +
   theme(axis.title.x=element_blank(),
    axis.text.x=element_blank(),
    axis.ticks.x=element_blank())

ggsave(g2, file="Figure_1B.svg",width=12, height=4, units="in")


g_F1 <- plot_grid(g1, g2, labels = c("A", "B"), align = "v", nrow=2, rel_widths=c(1,1))

ggsave(g_F1, file="filteringImprovement.svg", width=20, height=20, units="cm")


#g2 <- ggplot(data=lengths.merged, mapping=aes(x=chromosome, y=log10(length), fill=type)) + geom_boxplot(coef=1e10) + theme_few(12) +
# scale_fill_manual(values=c("white","gray80","gray40")) + labs(x="Chromosome", y="Recombination Block Length (log10(bp)", fill="Type")
# ggsave(g2, file="Figure_1B.svg",width=12, height=4, units="in")

# calculate % missing data per chromosome

lengths.total <- o[, list("totalLength"=sum(length)), by=list(chromosome,indID)]
lengths.filtered <- o[par=="unknown", list("filteredLength"=sum(length)), by=list(chromosome,indID)]

setkey(lengths.total, indID, chromosome)
setkey(lengths.filtered, indID, chromosome)

lengths.all <- merge(lengths.total, lengths.filtered, all=T)
lengths.all[is.na(filteredLength), filteredLength := 0]
lengths.all[, filteredPercent := filteredLength/totalLength]

g3 <- ggplot(data=lengths.all, mapping=aes(x=chromosome, y=filteredPercent)) + geom_jitter(size=1, alpha=0.4, shape=21) + theme_few(12) +
labs(x="Chromosome", y="Percent of Chromosome Filtered due to\nShort Recombination Block Length")

lengths.all[, idx := 1:.N]
lengths.all[filteredPercent==0, jitteredPercent := filteredPercent+0.01*runif(1), by=idx]
lengths.all[is.na(jitteredPercent), jitteredPercent := filteredPercent]

ggplot(data=lengths.all, mapping=aes(x=filteredPercent, y=chromosome)) + geom_jitter(shape=21, alpha=0.4) + theme_few(12) +
labs(x="Percent of Chromosome Filtered due to Short Recombination Block Length", y="Chromosome")

g3 <- ggplot(data=lengths.all, mapping=aes(x=filteredPercent)) + geom_histogram(bins=200) + theme_few(12) +
labs(x="Percent of Chromosome Filtered due to Short Recombination Block Length", y="Frequency (on square-root transformed axis)") + facet_grid(chromosome~.) + scale_y_continuous(trans="sqrt", breaks=seq(1,20,3)^2)


ggsave(g3, file="Figure_2A.svg",width=12, height=8, units="in")

# 40% have no filtering at all, 80% less than 5% filtered



# do sliding window
# get min/max values for chromosomes
chrLengths <- o[, list("chrLength"=max(stop)), by=chromosome]

if(! exists("filtered_estimates/filtered_haplotypes.tab")) {
  o2 <- foreach(chr=c("2L","2R","3L","3R","X"), .combine="rbind") %do% {
    chrMax <- chrLengths[chromosome==chr, chrLength]
    foreach(startPos=seq(1e5,chrMax-1e5, 10000), .combine="rbind") %do% {
      stopPos <- startPos+10000
      data.table(chr, startPos, stopPos, N_missing=o[chromosome==chr & par == "unknown" & stop > startPos & start < stopPos, .N])
    }
  }
  write.table(o2, file="filtered_estimates/filtered_haplotypes.tab", quote=F, row.names=F, col.names=T, sep="\t")
} else {
  print("reading pre-computed filtered haplotypes")
  o2 <- fread("filtered_estimates/filtered_haplotypes.tab")
}

inversions <- data.table(name=c("In2LT", "In2RNS", "In3RP", "In3LP", "In1A"), chr=c("2L","2R","3R","3L","X"), x1=c(2225744, 11278659, 12257931, 3173046, 13519769), x2=c(13154180, 16163839, 20569732, 16301941, 19473361))
# from Population Genomics of Inversion Polymorphisms in Drosophila melanogaster
# Russell B. Corbett-Detig Daniel L. Hartl https://journals.plos.org/plosgenetics/article?id=10.1371/journal.pgen.1003056

g4 <- ggplot(data=o2, mapping=aes(x=startPos, y=N_missing/374)) + geom_line() + facet_grid(chr~.)  +
geom_rect(data=inversions,  alpha=0.2, mapping=aes(xmin=x1, xmax=x2, ymin=0, ymax=0.25), inherit.aes=FALSE) +
scale_x_continuous(breaks=c(1e6, 5e6, 10e6, 15e6, 20e6, 25e6), labels=c("1 Mbp", "5 Mbp", "10 Mbp", "15 Mbp", "20 Mbp", "25 Mbp")) +
labs(x="Window Position", y="Percent of Samples with Filtered Ancestry")

ggsave(g4, file="Figure_2B.svg",width=12, height=8, units="in")
